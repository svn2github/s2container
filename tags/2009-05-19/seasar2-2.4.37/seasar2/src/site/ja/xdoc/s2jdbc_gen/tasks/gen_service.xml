<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>S2JDBC-Gen - Gen-Service</title>
	</properties>
	<body>
		<section name="Gen-Service">
			<ul>
				<li>
					<p>
						<a href="#説明">説明</a>
						<ul>
							<li>
								<p>
									<a href="#概要">概要</a>
								</p>
							</li>
						</ul>
					</p>
				</li>
				<li>
					<p>
						<a href="#パラメータ">パラメータ</a>
						<ul>
							<li>
								<p>
									<a href="#トップレベルのパラメータ">トップレベルのパラメータ</a>
								</p>
							</li>
							<li>
								<p>
									<a href="#ネストした要素として指定されるパラメータ">ネストした要素として指定されるパラメータ</a>
								</p>
							</li>
						</ul>
					</p>
				</li>
				<li>
					<p>
						<a href="#例">例</a>
						<ul>
							<li>
								<p>
									<a href="#サービスクラスのパッケージを指定する">サービスクラスのパッケージを指定する</a>
								</p>
							</li>
							<li>
								<p>
									<a href="#独自のテンプレートファイルを使用する">独自のテンプレートファイルを使用する</a>
								</p>
							</li>
							<li>
								<p>
									<a href="#生成するJavaファイルに共通のヘッダーとしてコピーライトを含める">生成するJavaファイルに共通のヘッダーとしてコピーライトを含める</a>
								</p>
							</li>
							<li>
								<p>
									<a href="#生成するJavaファイルにauthorを指定する">生成するJavaファイルにauthorを指定する</a>
								</p>
							</li>
						</ul>
					</p>
				</li>
			</ul>
		</section>
		<section name="説明">
			<subsection name="概要">
				<p>
					サービスクラス（Serviceクラス）を生成します。
					サービスクラスとは、エンティティを利用するビジネスロジックを持つクラスで、エンティティクラスにつき1つ生成されます。
				</p>
				<p>
					例えば、次のようなコードを生成できます。
				</p>
<source><![CDATA[import static example.entity.AddressNames.*;
import static org.seasar.extension.jdbc.operation.Operations.*;

/**
 * {@link Address}のサービスクラスです。
 * 
 * @author S2JDBC-Gen
 */
public class AddressService extends AbstractService<Address> {

    /**
     * 識別子でエンティティを検索します。
     * 
     * @param id
     *            識別子
     * @return エンティティ
     */
    public Address findById(Integer id) {
        return select().id(id).getSingleResult();
    }

    /**
     * 識別子の昇順ですべてのエンティティを検索します。
     * 
     * @return エンティティのリスト
     */
    public List<Address> findAllOrderById() {
        return select().orderBy(asc(id())).getResultList();
    }
    
}]]></source>
				<p>
					これはエンティティクラスAddressに対するサービスクラスです。
				</p>
				<p>
					サービスクラスはデフォルトで名前クラス（Namesクラス）とOperationsクラスをstatic importし、<a href="../../s2jdbc_typesafe.html">タイプセーフAPI</a>を簡単に利用できるようになっています。
				</p>
				<p>
					サービスクラスは、自由に修正して利用できます。
				</p>
			</subsection>
		</section>
		<section name="パラメータ">
			<p>
				Antタスクへのパラメータを以下に示します。
			</p>
			<subsection name="トップレベルのパラメータ">
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>属性</th><th>説明</th><th>デフォルト値</th><th>必須</th></tr>
					<tr><td>classpathDir</td><td>エンティティクラスを含むクラスパスのディレクトリです。このディレクトリはタスクの実行時のクラスパスに含まれている必要があります。</td><td>-</td><td>YES</td></tr>
					<tr><td>rootPackageName</td><td>ルートパッケージ名です。</td><td>""</td><td>NO</td></tr>
					<tr><td>entityPackageName</td><td>エンティティクラスのパッケージ名です。エンティティクラスは、rootPackageNameとこの値をピリオドで連結したパッケージに配置されているとみなされます。</td><td>"entity"</td><td>NO</td></tr>
					<tr><td>entityClassNamePattern</td><td>このタスクで対象とするエンティティクラス名の正規表現です。</td><td>".*"</td><td>NO</td></tr>
					<tr><td>ignoreEntityClassNamePattern</td><td>このタスクで対象としないエンティティクラス名の正規表現です。</td><td>""</td><td>NO</td></tr>
					<tr><td>servicePackageName</td><td>サービスクラスのパッケージ名です。サービスクラスは、rootPackageNameとこの値をピリオドで連結したパッケージに配置されます。</td><td>"service"</td><td>NO</td></tr>
					<tr><td>serviceClassNameSuffix</td><td>サービスクラス名のサフィックスです。</td><td>"Service"</td><td>NO</td></tr>
					<tr><td>abstractServiceTemplateFileName</td><td>抽象サービスクラスのテンプレートファイル名です。</td><td>"java/abstract-service.ftl"</td><td>NO</td></tr>
					<tr><td>serviceTemplateFileName</td><td>サービスクラスのテンプレートファイル名です。</td><td>"java/service.ftl"</td><td>NO</td></tr>
					<tr><td>useNamesClass</td><td>"true"の場合、名前クラスを使用します。</td><td>"true"</td><td>NO</td></tr>
					<tr><td>namesClassNameSuffix</td><td>名前クラス名のサフィックスです。</td><td>"Names"</td><td>NO</td></tr>
					<tr><td>namesPackageName</td><td>名前クラスのパッケージ名です。名前インタフェースは、rootPackageNameとこの値をピリオドで連結したパッケージに配置されているとみなされます。</td><td>"entity"</td><td>NO</td></tr>
					<tr><td>templateFileEncoding</td><td>テンプレートファイルのエンコーディングです。</td><td>"UTF-8"</td><td>NO</td></tr>
					<tr><td>templateFilePrimaryDir</td><td>テンプレートファイルを検索する際の優先ディレクトリです。</td><td>-</td><td>NO</td></tr>
					<tr><td>javaFileDestDir</td><td>Javaファイルの出力先ディレクトリです。</td><td>"src/main/java"</td><td>NO</td></tr>
					<tr><td>javaFileEncoding</td><td>Javaファイルのエンコーディングです。</td><td>"UTF-8"</td><td>NO</td></tr>
					<tr><td>overwrite</td><td>"true"の場合、サービスクラスのJavaファイルを上書きします。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>overwriteAbstractService</td><td>"true"の場合、抽象サービスクラスのJavaファイルを上書きします。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>configPath</td><td>JdbcManagerのコンポーネント定義を含む設定ファイルです。このタスクの実行に使用されます。</td><td>"s2jdbc.dicon"</td><td>NO</td></tr>
					<tr><td>env</td><td>環境名です。</td><td>"ut"</td><td>NO</td></tr>
					<tr><td>jdbcManagerName</td><td>JdbcManagerのコンポーネント名です。接続先のデータベースはJdbcManagerのコンポーネント名によって決まります。</td><td>"jdbcManager"</td><td>NO</td></tr>
					<tr><td>factoryClassName</td><td>S2JDBC-Genの公開されたインタフェースの実装を作成するファクトリのクラス名です。S2JDBC-Genをカスタマイズする場合に独自のファクトリクラスを指定できます。ここに指定するクラスはorg.seasar.extension.jdbc.gen.internal.factory.Factoryインタフェースを実装している必要があります。</td><td>"org.seasar.extension.jdbc.gen<br />.internal.factory.FactoryImpl"</td><td>NO</td></tr>
					<tr><td>commandInvokerClassName</td><td>S2JDBC-Genのコマンドを呼び出すクラスの名前です。コマンドの呼び出し前後で任意の処理を実行したい場合に指定します。ここに指定するクラスはorg.seasar.extension.jdbc.gen.command.CommandInvokerインタフェースを実装している必要があります。</td><td>"org.seasar.extension.jdbc.gen<br />.internal.command.CommandInvokerImpl"</td><td>NO</td></tr>
					<tr><td>classpath</td><td>このタスクを実行する際のクラスパスです。</td><td>-</td><td>classpathrefが指定されていない場合YES</td></tr>
					<tr><td>classpathref</td><td>このタスクを実行する際のクラスパスの参照です。</td><td>-</td><td>classpathが指定されていない場合YES</td></tr>
				</table>
			</subsection>
			<subsection name="ネストした要素として指定されるパラメータ">
				<h4>
					jvmArg
				</h4>
				<p>
					このタスクの大部分の処理は別VMで行われます。VMに引数を渡す場合は&lt;jvmarg&gt;要素を使用します。
					これはAntのJavaタスクで使用できる&lt;jvmarg&gt;と同じです。
					使用可能な属性やネストした要素についてはAntのドキュメントを参照してください。
				</p>
			</subsection>
		</section>
		<section name="例">
			<subsection name="サービスクラスのパッケージを指定する">
				<p>
					サービスクラスのデフォルトのパッケージ名は"service"ですが、servicePackageName属性に任意のパッケージ名を指定できます。 次の例では"myservice"を指定しています。 
				</p>
<source><![CDATA[<gen-service
    rootPackageName="examples"
    servicePackageName="myservice"
    classpathRef="classpath"
/>]]></source>
			</subsection>
			<subsection name="独自のテンプレートファイルを使用する">
				<p>
					任意のディレクトリに独自のテンプレートファイルを置き、templateFilePrimaryDir属性にそのディレクトリを指定することで、
					独自のテンプレートファイルを使用できます。
				</p>
				<p>
					S2JDBC-Genのテンプレートは、配布ファイルのresources/tempaltesディレクトリ以下にあります。
					サービスクラスのテンプレートはjava/service.ftlになります。
					これをコピーして、修正を加えるのが良いでしょう。
					テンプレートの記述方法については<a href="http://freemarker.sourceforge.net/">FreeMarker</a>のドキュメントを参照してください。
				</p>
				<p>
					テンプレートファイルを格納するディレクトリをmytempletesとする場合、
					修正した独自テンプレートを使用するにはテンプレートをmytempletes/java/service.ftlと配置し、templateFilePrimaryDir属性にmytempletesを指定します。
				</p>
<source><![CDATA[<gen-service
    rootPackageName="examples"
    templateFilePrimaryDir="mytempletes"
    classpathRef="classpath"
/>]]></source>
				<p>
					mytempletes/my-service.ftlのように、テンプレートファイルを任意の名前で配置したい場合は、
					templateFilePrimaryDir属性に加え、serviceTemplateFileName属性も指定します。
				</p>
<source><![CDATA[<gen-service
    rootPackageName="examples"
    templateFilePrimaryDir="mytempletes"
    serviceTemplateFileName="my-service.ftl"
    classpathRef="classpath"
/>]]></source>
			</subsection>
			<subsection name="生成するJavaファイルに共通のヘッダーとしてコピーライトを含める">
				<p>
					lib.ftlというファイルを作成し、これをtemplateFilePrimaryDir属性に指定するディレクトリに配置します。
					lib.ftlには次のようにcopyrightの定義をします。
<source><![CDATA[<#assign copyright>
/*
 * Copyright 2008-2009 ...
 * All rights reserved.
 */
</#assign>]]></source>
					mytempletes/lib.ftlと配置する場合、タスクの定義は次のようになります。
				</p>
<source><![CDATA[<gen-service
    rootPackageName="examples"
    templateFilePrimaryDir="mytempletes"
    classpathRef="classpath"
/>]]></source>
				<p>
					copyright.ftlにコピーライトを記述することもできます（過去バージョンとの互換機能として残されています）。
					copyright.ftlを使う場合は、#assignタグを使わずコピーライトのみを指定してください。
					lib.ftlと同様、copyright.ftlはtemplateFilePrimaryDir属性に指定するディレクトリに配置する必要があります。
				</p>
			</subsection>
			<subsection name="生成するJavaファイルにauthorを指定する">
				<p>
					lib.ftlというファイルを作成し、これをtemplateFilePrimaryDir属性に指定するディレクトリに配置します。
					lib.ftlには次のようにauthorの定義をします。
<source><![CDATA[<#assign author="Nakamura">]]></source>
					mytempletes/lib.ftlと配置する場合、タスクの定義は次のようになります。
				</p>
<source><![CDATA[<gen-service
    rootPackageName="examples"
    templateFilePrimaryDir="mytempletes"
    classpathRef="classpath"
/>]]></source>
			</subsection>
		</section>
	</body>
</document>
