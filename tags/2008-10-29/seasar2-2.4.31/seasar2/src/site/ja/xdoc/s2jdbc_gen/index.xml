<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>S2JDBC-Gen - S2JDBC-Genとは</title>
	</properties>
	<body>
		<section name="S2JDBC-Genとは">
			<p></p>
			<ul>
				<li>
					<p>
						<a href="#概要">概要</a>
					</p>
				</li>
				<li>
					<p>
						<a href="#エンティティクラスの生成">エンティティクラスの生成</a>
					</p>
				</li>
				<li>
					<p>
						<a href="#DDLの生成">DDLの生成</a>
					</p>
				</li>
				<li>
					<p>
						<a href="#マイグレーション">マイグレーション</a>
					</p>
				</li>
			</ul>
		</section>
		<section name="概要">
			<p>
				S2JDBC-Genとは、<a href="../s2jdbc_abstract.html">S2JDBC</a>を使った開発をサポートするツールです。
				S2JDBC-Genは、データベーススキーマの修正をJavaのエンティティクラスに反映させるといった開発スタイルではなく、
				エンティティクラスの修正をデータベーススキーマに反映させるといった開発スタイルを可能にします。
			</p>
			<p>
				主な機能には次のようなものがあります。
			</p>
			<ol>
				<li>
					データベースからエンティティクラスのJavaコードを生成する機能
				</li>
				<li>
					エンティティクラスからDDL(Data Definition Language)スクリプトとCSV形式のダンプデータを生成し、バージョン管理する機能
				</li>
				<li>
					バージョン管理されたDDLスクリプトとダンプファイルを使用してデータベーススキーマをマイグレーションする機能
				</li>
			</ol>
			<img src="../images/s2jdbc_gen_about.png"
				width="454" height="152" alt="S2JDBC-Gen概要" />
			<p>
				「データベースからエンティティクラスのJavaコードを生成する機能」は最初に一度だけ行われる初期インポートに相当します。
				エンティティの生成後は、エンティティを直接修正してDDLを生成し、DDLとデータをデータベースに適用するというプロセスを繰り返すことができます。
			</p>
			<p>
				S2JDBC-Genの様々な機能は、<a href="http://ant.apache.org/">Apache Ant</a>を使って起動できるようになっています。
				セットアップの方法は<a href="setup.html">セットアップ</a>を参照ください。
				S2JDBC-Genが提供するAntタスクについては<a href="task.html#タスク一覧">タスク一覧</a>を参照ください。
			</p>
		</section>
		<section name="エンティティクラスの生成">
			<p>
				テーブルに対応するエンティティクラスのJavaコードを生成できます。
				外部キーが存在する場合は、クラスの関連付けも行います。
			</p>
			<p>
				たとえば、次のDDLで表されるDEPARTMENTテーブルとEMPLOYEEテーブルがデータベース上に存在するとします。
			</p>
<source><![CDATA[create table DEPARTMENT (
    DEPARTMENT_ID integer not null primary key, 
    DEPARTMENT_NAME varchar(20)
);

create table EMPLOYEE (
    EMPLOYEE_ID integer not null primary key, 
    EMPLOYEE_NAME varchar(20),
    DEPARTMENT_ID integer
    CONSTRAINT fk_department_id foreign key(DEPARTMENT_ID) references DEPARTMENT(DEPARTMENT_ID)
);]]></source>
			<p>
				S2JDBC-Genはデータベース上のテーブルの定義から次のような2つのエンティティクラスのJavaコードを生成できます。
			</p>
<source><![CDATA[/**
 * Departmentエンティティクラスです。
 * 
 * @author S2JDBC-Gen
 */
@Entity
public class Department {

    /** departmentIdプロパティ */
    @Id
    @GeneratedValue
    @Column(nullable = false, unique = true)
    public Integer departmentId;

    /** departmentNameプロパティ */
    @Column(length = 20, nullable = true, unique = false)
    public String departmentName;

    /** employees関連プロパティ */
    @OneToMany(mappedBy = "department")
    public List<Employee> employeeList;
}]]></source>
<source><![CDATA[/**
 * Employeeエンティティクラスです。
 * 
 * @author S2JDBC-Gen
 */
@Entity
public class Employee {

    /** employeeIdプロパティ */
    @Id
    @GeneratedValue
    @Column(nullable = false, unique = true)
    public Integer employeeId;

    /** employeeNameプロパティ */
    @Column(length = 20, nullable = true, unique = false)
    public String employeeName;

    /** departmentIdプロパティ */
    @Column(nullable = true, unique = false)
    public Integer departmentId;

    /** department関連プロパティ */
    @ManyToOne
    @JoinColumn(name = "DEPARTMENT_ID", referencedColumnName = "DEPARTMENT_ID")
    public Department department;
}]]></source>
		</section>
		<section name="DDLの生成">
			<p>
				エンティティクラスからDDLスクリプトを生成できます。
				サポートしているデータベースオブジェクトは次の通りです。
			</p>
			<ul>
				<li>
					テーブル（主キー、NOT NULL制約、デフォルト値等の定義も含む）
				</li>
				<li>
					IDの採番用のシーケンス（使用するデータベースがシーケンスをサポートし、IDの採番をシーケンスを使って行う場合）
				</li>
				<li>
					一意キー
				</li>
				<li>
					外部キー
				</li>
			</ul>
			<p>
				たとえば、上で示したEmployeeクラスからHSQLDB用のDDLスクリプトを生成すると、次のようなスクリプトが出力されます。
			</p>
<source><![CDATA[create table EMPLOYEE (
    ID integer generated by default as identity(start with 1), 
    EMPLOYEE_NAME varchar(20), 
    DEPARTMENT_ID integer, 
    constraint EMPLOYEE_PK primary key(ID)
);]]></source>
<source><![CDATA[alter table EMPLOYEE add constraint EMPLOYEE_FK1 foreign key (DEPARTMENT_ID) references DEPARTMENT (ID);]]></source>
<source><![CDATA[drop table EMPLOYEE;]]></source>
<source><![CDATA[alter table EMPLOYEE drop constraint EMPLOYEE_FK1;]]></source>
			<p>
				データベースオブジェクト作成用のDDLスクリプトだけでなく削除用のDDLスクリプトも合わせて生成されます。
				生成されたDDLスクリプトはS2GDBC-Genによりバージョン管理されます。
			</p>
			<p>
				上に挙げたもの以外のデータベースオブジェクト（ビュー、トリガー、ストアドプロシージャーなど）は、S2JDBC-Genによって生成はされませんが、
				これらのDDLスクリプトを別途作成して特定のディレクトリに格納すれば、S2JDBC-Genの管理下に置くことができます。
			</p>
			<p>
				S2JDBC-GenはDDL生成時にデータベースのデータをCSV形式でダンプ出力できます。
				この機能を利用すると、DDLスクリプトとDDLスクリプトに対応したデータを一緒に管理できます。
			</p>
		</section>
		<section name="マイグレーション">
			<p>
				バージョン管理されたDDLを使用して、データベーススキーマの再作成を実行できます。
				新しいデータベーススキーマの作成後、バージョン管理されたCSV形式のデータを自動でロードすることもできます。
			</p>
			<p>
				マイグレーションの大まかな処理の流れは次の通りです。
			</p>
			<ol>
				<li>
					古いバージョンのデータベーススキーマを削除する。
				</li>
				<li>
					新しいバージョンのデータベーススキーマを作成する。
				</li>
				<li>
					新しいバージョンのデータをロードする。
				</li>
				<li>
					新しいバージョンのデータベーススキーマに外部キーを適用する。
				</li>
			</ol>
			<p>
				独自のDDLスクリプトを作成し、S2JDBC-Genの管理下においておけば、
				そのスクリプトの実行は上記の処理の中に組み込むことができます。
			</p>
			<p>
				Subversionなどのソースコード管理ツールでDDLスクリプトとデータを管理しておくと、
				マイグレーション機能と組み合わせて複数のPCで動作している開発用データベースを簡単に同期させられます。
			</p>
		</section>
	</body>
</document>
