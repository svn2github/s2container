<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>S2JDBC-Gen - S2JDBC-Genとは</title>
	</properties>
	<body>
		<section name="S2JDBC-Genとは">
			<p></p>
			<ul>
				<li>
					<p>
						<a href="#概要">概要</a>
					</p>
				</li>
				<li>
					<p>
						<a href="#主な機能">主な機能</a>
					</p>
					<ul>
						<li>
							<p>
								<a href="#エンティティクラスの生成">エンティティクラスの生成</a>
							</p>
						</li>
						<li>
							<p>
								<a href="#DDLの生成">DDLの生成</a>
							</p>
						</li>
						<li>
							<p>
								<a href="#マイグレーション">マイグレーション</a>
							</p>
						</li>
					</ul>
				</li>
				<li>
					<p>
						<a href="#S2JDBC-Genの効果的な利用法">S2JDBC-Genの効果的な利用法</a>
					</p>
				</li>
				<li>
					<p>
						<a href="#対応データベース">対応データベース</a>
					</p>
				</li>
			</ul>
		</section>
		<section name="概要">
			<p>
				S2JDBC-Genとは、<a href="../s2jdbc_abstract.html">S2JDBC</a>を使った開発をサポートするツールです。
				J2JDBC-Genは、保守・運用といったフェーズではなく開発のフェーズを対象としています。
				S2JDBC-Genを利用することで、データベーススキーマの修正をJavaのエンティティクラスに反映させるといった開発スタイルではなく、
				エンティティクラスの修正をデータベーススキーマに反映させるといった開発スタイルが可能になります。
			</p>
			<p>
				S2JDBC-Genは、Javaのコード修正によるデータベースリファクタリングを実現します。
			</p>
			<p>
				主な機能には次のようなものがあります。
			</p>
			<ol>
				<li>
					データベースからエンティティクラスのJavaコードを生成する機能
				</li>
				<li>
					エンティティクラスからDDL(Data Definition Language)スクリプトとCSV形式のダンプデータを生成し、バージョン管理する機能
				</li>
				<li>
					バージョン管理されたDDLスクリプトとダンプファイルを使用してデータベーススキーマをマイグレーションする機能
				</li>
			</ol>
			<img src="../images/s2jdbc_gen_about.png"
				width="454" height="152" alt="S2JDBC-Gen概要" />
			<p>
				「データベースからエンティティクラスのJavaコードを生成する機能」は最初に一度だけ行われる初期インポートに相当します。
				エンティティの生成後は、エンティティを直接修正してDDLを生成し、DDLとデータをデータベースに適用するというプロセスを繰り返すことができます。
			</p>
			<p>
				S2JDBC-Genの様々な機能は、<a href="http://ant.apache.org/">Apache Ant</a>を使って起動できるようになっています。
				セットアップの方法は<a href="setup.html">セットアップ</a>を参照ください。
				S2JDBC-Genが提供するAntタスクについては<a href="task.html#タスク一覧">タスク一覧</a>を参照ください。
			</p>
		</section>
		<section name="主な機能">
			<subsection name="エンティティクラスの生成">
				<p>
					テーブルに対応するエンティティクラスのJavaコードを生成できます。
					外部キーが存在する場合は、クラスの関連付けも行います。
				</p>
				<p>
					たとえば、次のDDLで表されるDEPARTMENTテーブルとEMPLOYEEテーブルがデータベース上に存在するとします。
				</p>
<source><![CDATA[create table DEPARTMENT (
    DEPARTMENT_ID integer not null primary key, 
    DEPARTMENT_NAME varchar(20)
);

create table EMPLOYEE (
    EMPLOYEE_ID integer not null primary key, 
    EMPLOYEE_NAME varchar(20),
    DEPARTMENT_ID integer,
    CONSTRAINT fk_department_id foreign key(DEPARTMENT_ID) references DEPARTMENT(DEPARTMENT_ID)
);]]></source>
				<p>
					S2JDBC-Genはデータベース上のテーブルの定義から次のような2つのエンティティクラスのJavaコードを生成できます。
				</p>
<source><![CDATA[/**
 * Departmentエンティティクラスです。
 * 
 * @author S2JDBC-Gen
 */
@Entity
public class Department {

    /** departmentIdプロパティ */
    @Id
    @GeneratedValue
    @Column(nullable = false, unique = true)
    public Integer departmentId;

    /** departmentNameプロパティ */
    @Column(length = 20, nullable = true, unique = false)
    public String departmentName;

    /** employees関連プロパティ */
    @OneToMany(mappedBy = "department")
    public List<Employee> employeeList;
}]]></source>
<source><![CDATA[/**
 * Employeeエンティティクラスです。
 * 
 * @author S2JDBC-Gen
 */
@Entity
public class Employee {

    /** employeeIdプロパティ */
    @Id
    @GeneratedValue
    @Column(nullable = false, unique = true)
    public Integer employeeId;

    /** employeeNameプロパティ */
    @Column(length = 20, nullable = true, unique = false)
    public String employeeName;

    /** departmentIdプロパティ */
    @Column(nullable = true, unique = false)
    public Integer departmentId;

    /** department関連プロパティ */
    @ManyToOne
    @JoinColumn(name = "DEPARTMENT_ID", referencedColumnName = "DEPARTMENT_ID")
    public Department department;
}]]></source>
				<p>
					詳しくは、<a href="tasks/gen_entity.html">Gen-Entity</a>タスクを参照ください。
				</p>
			</subsection>
			<subsection name="DDLの生成">
				<p>
					エンティティクラスからDDLスクリプトを生成できます。
					サポートしているデータベースオブジェクトは次の通りです。
				</p>
				<ul>
					<li>
						テーブル（主キー、NOT NULL制約、デフォルト値等の定義も含む）
					</li>
					<li>
						IDの採番用のシーケンス（使用するデータベースがシーケンスをサポートし、IDの採番をシーケンスを使って行う場合）
					</li>
					<li>
						一意キー
					</li>
					<li>
						外部キー
					</li>
				</ul>
				<p>
					たとえば、データベースHSQLDBを使用している場合、上で示したEmployeeクラスからは次のようなスクリプトが出力されます。
				</p>
<source><![CDATA[create table EMPLOYEE (
    ID integer generated by default as identity(start with 1), 
    EMPLOYEE_NAME varchar(20), 
    DEPARTMENT_ID integer, 
    constraint EMPLOYEE_PK primary key(ID)
);]]></source>
<source><![CDATA[alter table EMPLOYEE add constraint EMPLOYEE_FK1 foreign key (DEPARTMENT_ID) references DEPARTMENT (ID);]]></source>
<source><![CDATA[drop table EMPLOYEE;]]></source>
<source><![CDATA[alter table EMPLOYEE drop constraint EMPLOYEE_FK1;]]></source>
				<p>
					データベースオブジェクト作成用のDDLスクリプトだけでなく削除用のDDLスクリプトも合わせて生成されます。
					生成されたDDLスクリプトはS2GDBC-Genによりバージョン管理されます。
				</p>
				<p>
					上に挙げたもの以外のデータベースオブジェクト（ビュー、トリガー、ストアドプロシージャーなど）は、S2JDBC-Genによって生成はされませんが、
					これらのDDLスクリプトを別途作成して特定のディレクトリに格納すれば、S2JDBC-Genの管理下に置くことができます。
				</p>
				<p>
					S2JDBC-GenはDDL生成時にデータベースのデータをCSV形式でダンプ出力できます。
					この機能を利用すると、DDLスクリプトとDDLスクリプトに対応したデータを一緒に管理できます。
				</p>
				<p>
					詳しくは、<a href="tasks/gen_ddl.html">Gen-Ddl</a>タスクを参照ください。
				</p>
			</subsection>
			<subsection name="マイグレーション">
				<p>
					バージョン管理されたDDLを使用して、データベーススキーマの再作成を実行できます。
					新しいデータベーススキーマの作成後、バージョン管理されたCSV形式のデータを自動でロードすることもできます。
				</p>
				<p>
					マイグレーションの大まかな処理の流れは次の通りです。
				</p>
				<ol>
					<li>
						古いバージョンのデータベーススキーマを削除する。
					</li>
					<li>
						新しいバージョンのデータベーススキーマを作成する。
					</li>
					<li>
						新しいバージョンのデータをロードする。
					</li>
					<li>
						新しいバージョンのデータベーススキーマに外部キーを適用する。
					</li>
				</ol>
				<p>
					独自のDDLスクリプトを作成し、S2JDBC-Genの管理下においておけば、
					そのスクリプトの実行は上記の処理の中に組み込むことができます。
				</p>
				<p>
					Subversionなどのソースコード管理ツールでDDLスクリプトとデータを管理しておくと、
					マイグレーション機能と組み合わせて複数のPCで動作している開発用データベースを簡単に同期させられます。
				</p>
				<p>
					詳しくは、<a href="tasks/migrate.html">Migrate</a>タスクを参照ください。
				</p>
			</subsection>
		</section>
		<section name="S2JDBC-Genの効果的な利用法">
			<p>
				S2JDBC-Genを効果的に利用するには、S2JDBC-Genに適した開発スタイルと開発環境が重要です。
			</p>
			<subsection name="開発スタイル">
				<p>
					S2JDBC-Genに適した開発スタイルとは、上記で説明したようにDDLの生成とマイグレーションを何度も繰り返すような開発スタイルです
					（すでにデータベーススキーマが存在するときのみ、エンティティクラスをデータベーススキーマから生成します）。
					エンティティクラスへの修正をデータベーススキーマに反映させるため、Javaコード中心の開発スタイルと言えます。
					この開発スタイルでは、エンティティクラスや依存する他のクラスの修正を、EclipseなどのIDEのリファクタリング機能を利用して行えるというメリットがあります。
				</p>
				<p>
					逆に、S2JDBC-Genに適さない開発スタイルとは、データベーススキーマの修正のたびにデータベーススキーマからエンティティクラスを生成しなおす開発スタイルです。
					これは、データベーススキーマ中心の開発スタイルと言えます。
					この開発スタイルでは、データベースから自動生成する部分と、手動で変更を加える部分を分離するGeneration Gapパターンの利用が一般的ですが、
					S2JDBC-Genでは、データベースからのエンティティクラスの生成は最初の一度だけのみ行うことを想定しているためGeneration Gapパターンは採用していません。
					S2JDBC-Genでは、直接修正しやすいシンプルなコードを生成します。
					データベーススキーマ中心の開発スタイルを採用する場合は、S2JDBCとS2JDBC-Genの組み合わせよりも、<a href="http://dbflute.sandbox.seasar.org/">DBFlute</a>の利用を検討してみてはいかがでしょうか。
				</p>
			</subsection>
			<subsection name="開発環境">
				<p>
					S2JDBC-Genを使った開発では、次の環境が前提となります。
				</p>
				<ul>
					<li>
						データベースは開発者ごとに用意する
					</li>
					<li>
						Subversionなどのバージョン管理ツールを利用してソースコードを管理する
					</li>
				</ul>
				<p>
					データベースを開発者ごとに用意するのは、データベーススキーマの修正作業が他の開発者の作業を妨げないようにするためです。
				</p>
				<p>
					ある環境で、データベーススキーマの修正が正しく動作することを確認できたら、DDLとダンプデータを他の開発者と共有する必要があります。
					その共有にバージョン管理ツールを利用します。
					バージョン管理ツールを利用すると、全体（クラス、データベーススキーマ、データ）の一貫性を保ったままいつでも任意のバージョンのデータベーススキーマに戻すことができます。
				</p>
			</subsection>
		</section>
		<section name="対応データベース">
			<p>
				S2JDBC-Genでは次のデータベースに対応しています。
			</p>
			<ul>
				<li>
					Oracle Database
				</li>
				<li>
					IBM DB2
				</li>
				<li>
					Microsoft SQL Server
				</li>
				<li>
					MySQL
				</li>
				<li>
					PostgreSQL
				</li>
				<li>
					H2 Database Engine
				</li>
				<li>
					HSQLDB 
				</li>
				<li>
					Derby
				</li>
			</ul>
			<p>
				ここに挙げた以外のデータベースについてもできる限り動作するように試みていますが、完全には動作しない可能性が高いです。
				必要であれば対応しますので、どのように動作しないか情報提供を<a href="https://ml.seasar.org/mailman/listinfo/seasar-user">メーリングリスト</a>までお願いします。
			</p>
		</section>
	</body>
</document>
