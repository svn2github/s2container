<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>S2JDBC-Gen - Gen-ServiceTest</title>
	</properties>
	<body>
		<section name="Gen-ServiceTest">
			<ul>
				<li>
					<p>
						<a href="#説明">説明</a>
						<ul>
							<li>
								<p>
									<a href="#概要">概要</a>
								</p>
							</li>
						</ul>
					</p>
				</li>
				<li>
					<p>
						<a href="#パラメータ">パラメータ</a>
						<ul>
							<li>
								<p>
									<a href="#トップレベルのパラメータ">トップレベルのパラメータ</a>
								</p>
							</li>
							<li>
								<p>
									<a href="#ネストした要素として指定されるパラメータ">ネストした要素として指定されるパラメータ</a>
								</p>
							</li>
						</ul>
					</p>
				</li>
				<li>
					<p>
						<a href="#例">例</a>
						<ul>
							<li>
								<p>
									<a href="#ルートパッケージを指定する">ルートパッケージを指定する</a>
								</p>
							</li>
							<li>
								<p>
									<a href="#独自のテンプレートファイルを使用する">独自のテンプレートファイルを使用する</a>
								</p>
							</li>
							<li>
								<p>
									<a href="#生成するJavaファイルに共通のヘッダーとしてコピーライトを含める">生成するJavaファイルに共通のヘッダーとしてコピーライトを含める</a>
								</p>
							</li>
						</ul>
					</p>
				</li>
			</ul>
		</section>
		<section name="説明">
			<subsection name="概要">
				<p>
					サービスクラス（Serviceクラス）に対するテストクラスを作成します。
					サービスクラスとは、<a href="gen_service.html">Gen-Service</a>タスクによって生成されるクラスです。
				</p>
				<p>
					例えば、次のようなコードを生成できます。
				</p>
<source><![CDATA[/**
 * {@link AddressService}のテストクラスです。
 * 
 * @author S2JDBC-Gen
 */
public class AddressServiceTest extends S2TestCase {

    private AddressService addressService;

    /**
     * 事前処理をします。
     * 
     * @throws Exception
     */
    @Override
    protected void setUp() throws Exception {
        super.setUp();
        include("app.dicon");
    }

    /**
     * {@link #addressService}が利用可能であることをテストします。
     * 
     * @throws Exception
     */
    public void testAvailable() throws Exception {
        assertNotNull(addressService);
    }
}]]></source>
				<p>
					これはサービスクラスAddressServiceに対するテストクラスです。
					testAvailableメソッドは次のことを確認します。
					<ul>
						<li>
							サービスのコンポーネント（この例ではaddressService）がS2コンテナにデプロイされること
						</li>
						<li>
							サービスのコンポーネント（この例ではaddressService）に必須のコンポーネント（jdbcManagerなど）が設定されること
						</li>
					</ul>
				</p>
				<p>
					テストクラスは、自由に修正して利用できます。
				</p>
			</subsection>
		</section>
		<section name="パラメータ">
			<subsection name="トップレベルのパラメータ">
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>属性</th><th>説明</th><th>デフォルト値</th><th>必須</th></tr>
					<tr><td>classpathDir</td><td>エンティティクラスを含むクラスパスのディレクトリです。このディレクトリはタスクの実行時のクラスパスに含まれている必要があります。</td><td>-</td><td>YES</td></tr>
					<tr><td>rootPackageName</td><td>ルートパッケージ名です。</td><td>""</td><td>NO</td></tr>
					<tr><td>entityPackageName</td><td>エンティティクラスのパッケージ名です。エンティティクラスは、rootPackageNameとこの値をピリオドで連結したパッケージに配置されているとみなされます。</td><td>"entity"</td><td>NO</td></tr>
					<tr><td>entityClassNamePattern</td><td>このタスクで対象とするエンティティ名の正規表現です。</td><td>".*"</td><td>NO</td></tr>
					<tr><td>ignoreEntityClassNamePattern</td><td>このタスクで対象としないエンティティ名の正規表現です。</td><td>""</td><td>NO</td></tr>
					<tr><td>servicePackageName</td><td>サービスクラスのパッケージ名です。サービスクラスは、rootPackageNameとこの値をピリオドで連結したパッケージに配置されているとみなされます。</td><td>"service"</td><td>NO</td></tr>
					<tr><td>testClassNameSuffix</td><td>テストクラス名のサフィックスです。</td><td>"Test"</td><td>NO</td></tr>
					<tr><td>useS2junit4</td><td>"true"の場合、<a href="../../S2JUnit4.html">S2JUnit4</a>を使ったテストコードを生成します。"false"の場合、<a href="../../S2Unit.html">S2Unit</a>を使ったテストコードを生成します。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>templateFileName</td><td>テストクラスのテンプレートファイル名です。</td><td>"java/servicetest.ftl"</td><td>NO</td></tr>
					<tr><td>templateFileEncoding</td><td>テンプレートファイルのエンコーディングです。</td><td>"UTF-8"</td><td>NO</td></tr>
					<tr><td>templateFilePrimaryDir</td><td>テンプレートファイルを検索する際の優先ディレクトリです。</td><td>-</td><td>NO</td></tr>
					<tr><td>javaFileDestDir</td><td>Javaファイルの出力先ディレクトリです。</td><td>"src/test/java"</td><td>NO</td></tr>
					<tr><td>javaFileEncoding</td><td>Javaファイルのエンコーディングです。</td><td>"UTF-8"</td><td>NO</td></tr>
					<tr><td>overwrite</td><td>"true"の場合、テストクラスのJavaファイルを上書きします。</td><td>"false"</td><td>NO</td></tr>
					<tr><td>appConfigPath</td><td>サービスのコンポーネント定義やS2JDBCの設定ファイルを含むアプリケーション用の設定ファイルです。S2Unitを使用するテストコードではこの設定ファイルがincludeされます。S2JUnit4を使用する場合は、ここに指定する設定ファイル相当がs2junit4.diconにより自動includeされなければいけません。</td><td>"app.dicon"</td><td>NO</td></tr>
					<tr><td>configPath</td><td>JdbcManagerのコンポーネント定義を含む設定ファイルです。このタスクの実行に使用されます。</td><td>"s2jdbc.dicon"</td><td>NO</td></tr>
					<tr><td>env</td><td>環境名です。</td><td>"ut"</td><td>NO</td></tr>
					<tr><td>jdbcManagerName</td><td>JdbcManagerのコンポーネント名です。接続先のデータベースはJdbcManagerのコンポーネント名によって決まります。</td><td>"jdbcManager"</td><td>NO</td></tr>
					<tr><td>factoryClassName</td><td>S2JDBC-Genの公開されたインタフェースの実装を作成するファクトリのクラス名です。S2JDBC-Genをカスタマイズする場合に独自のファクトリクラスを指定できます。ここに指定するクラスはorg.seasar.extension.jdbc.gen.internal.factory.Factoryインタフェースを実装している必要があります。</td><td>"org.seasar.extension.jdbc.gen<br />.internal.factory.FactoryImpl"</td><td>NO</td></tr>
					<tr><td>commandInvokerClassName</td><td>S2JDBC-Genのコマンドを呼び出すクラスの名前です。コマンドの呼び出し前後で任意の処理を実行したい場合に指定します。ここに指定するクラスはorg.seasar.extension.jdbc.gen.command.CommandInvokerインタフェースを実装している必要があります。</td><td>"org.seasar.extension.jdbc.gen<br />.internal.command.CommandInvokerImpl"</td><td>NO</td></tr>
					<tr><td>classpath</td><td>このタスクを実行する際のクラスパスです。</td><td>-</td><td>classpathrefが指定されていない場合YES</td></tr>
					<tr><td>classpathref</td><td>このタスクを実行する際のクラスパスの参照です。</td><td>-</td><td>classpathが指定されていない場合YES</td></tr>
				</table>
			</subsection>
			<subsection name="ネストした要素として指定されるパラメータ">
				<h4>
					jvmArg
				</h4>
				<p>
					このタスクの大部分の処理は別VMで行われます。VMに引数を渡す場合は&lt;jvmarg&gt;要素を使用します。
					これはAntのJavaタスクで使用できる&lt;jvmarg&gt;と同じです。
					使用可能な属性やネストした要素についてはAntのドキュメントを参照してください。
				</p>
			</subsection>
		</section>
		<section name="例">
			<subsection name="ルートパッケージを指定する">
				<p>
					ルートパッケージに"examples"を設定してタスクを実行します。
				</p>
<source><![CDATA[<gen-servicetest
    rootPackageName="examples"
    classpathRef="classpath"
/>]]></source>
			</subsection>
			<subsection name="独自のテンプレートファイルを使用する">
				<p>
					任意のディレクトリに独自のテンプレートファイルを置き、templateFilePrimaryDir属性にそのディレクトリを指定することで、
					独自のテンプレートファイルを使用できます。
				</p>
				<p>
					S2JDBC-Genのテンプレートは、配布ファイルのresources/tempaltesディレクトリ以下にあります。
					サービスのテストクラスのテンプレートはjava/servicetest.ftlになります。
					これをコピーして、修正を加えるのが良いでしょう。
					テンプレートの記述方法については<a href="http://freemarker.sourceforge.net/">FreeMarker</a>のドキュメントを参照してください。
				</p>
				<p>
					テンプレートファイルを格納するディレクトリをmytempletesとする場合、
					修正した独自テンプレートを使用するにはテンプレートをmytempletes/java/servicetest.ftlと配置し、templateFilePrimaryDir属性にmytempletesを指定します。
				</p>
<source><![CDATA[<gen-servicetest
    rootPackageName="examples"
    templateFilePrimaryDir="mytempletes"
    classpathRef="classpath"
/>]]></source>
				<p>
					mytempletes/my-servicetest.ftlのように、テンプレートファイルを任意の名前で配置したい場合は、
					templateFilePrimaryDir属性に加え、templateFileName属性も指定します。
				</p>
<source><![CDATA[<gen-servicetest
    rootPackageName="examples"
    templateFilePrimaryDir="mytempletes"
    templateFileName="my-servicetest.ftl"
    classpathRef="classpath"
/>]]></source>
			</subsection>
			<subsection name="生成するJavaファイルに共通のヘッダーとしてコピーライトを含める">
				<p>
					copyright.ftlというファイルにコピーライトを記述し、これをtemplateFilePrimaryDir属性に指定するディレクトリに配置すると、
					生成されるJavaファイルのヘッダーにコピーライトの記述が含まれるようになります。
					mytempletes/copyright.ftlと配置する場合、タスクの定義は次のようになります。
				</p>
<source><![CDATA[<gen-servicetest
    rootPackageName="examples"
    templateFilePrimaryDir="mytempletes"
    classpathRef="classpath"
/>]]></source>
			</subsection>
		</section>
	</body>
</document>
