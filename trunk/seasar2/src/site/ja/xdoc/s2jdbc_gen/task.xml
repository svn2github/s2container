<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>S2JDBC-Gen - タスク</title>
	</properties>
	<body>
		<section name="タスク">
			<p></p>
			<ul>
				<li>
					<p>
						<a href="#タスクの一覧">タスクの一覧</a>
					</p>
				</li>
				<li>
					<p>
						<a href="#タスクの使用例">タスクの使用例</a>
					</p>
				</li>
			</ul>
		</section>
		<section name="タスクの一覧">
			<p>
				S2JDBC-Genでは以下のタスクを提供します。
			</p>
			<subsection name="コアタスク">
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>タスク名</th><th>説明</th></tr>
					<tr><td><a href="tasks/gen_entity.html">Gen-Entity</a></td><td>データベースのテーブルからエンティティクラスのJavaコードを生成するタスクです。</td></tr>
					<tr><td><a href="tasks/gen_ddl.html">Gen-Ddl</a></td><td>エンティティクラスからバージョン管理されたDDLを生成するタスクです。</td></tr>
					<tr><td><a href="tasks/migrate.html">Migrate</a></td><td>バージョン管理されたDDLを使いデータベーススキーマのマイグレーションを実行するタスクです。</td></tr>
				</table>
			</subsection>
			<subsection name="オプションタスク">
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>タスク名</th><th>説明</th></tr>
					<tr><td><a href="tasks/gen_test.html">Gen-Test</a></td><td>エンティティクラスからテストクラスのJavaコードを生成するタスクです。テストクラスではエンティティを使って実際にデータベースアクセスを行います。</td></tr>
					<tr><td><a href="tasks/gen_condition.html">Gen-Condition</a></td><td>エンティティクラスから条件クラスのJavaコードを生成するタスクです。条件クラスを使用すると、S2JDBCを使った問い合わせをタイプセーフにすることができます。</td></tr>
					<tr><td><a href="tasks/gen_names.html">Gen-Names</a></td><td>エンティティクラスから名前インタフェースのJavaコードを生成するクラスです。名前インタフェースはエンティティのプロパティ名を定数としてもつインタフェースです。この定数を使用することで、結合先のプロパティや検索条件のプロパティをタイプセーフで指定できます。</td></tr>
					<tr><td><a href="tasks/gen_service.html">Gen-Service</a></td><td>エンティティクラスからサービスクラスのJavaコードを生成するクラスです。サービスクラスはエンティティの問い合わせを簡略化するメソッドを提供します。</td></tr>
				</table>
			</subsection>
			<subsection name="ユーティリティタスク">
				<table border="1" cellpadding="2" cellspacing="0">
					<tr><th>タスク名</th><th>説明</th></tr>
					<tr><td><a href="tasks/dump_db_meta.html">Dump-Db-Meta</a></td><td>テーブルやカラムのメタデータをダンプするタスクです。主にS2JDBC-Genの開発者が利用することを想定しています。</td></tr>
					<tr><td><a href="tasks/dump_data.html">Dump-Data</a></td><td>データベースのデータをCSV形式でダンプするタスクです。ダンプの機能はGen-Ddlタスクに含まれていますが、Gen-Ddlタスクとは別にダンプを行いたい場合に使用できます。</td></tr>
					<tr><td><a href="tasks/load_data.html">Load-Data</a></td><td>CSV形式のダンプファイルをロードするタスクです。ロードの機能はMigrateタスクに含まれていますが、Migrateタスクとは別にロードを行いたい場合に使用できます。</td></tr>
					<tr><td><a href="tasks/exe_sql.html">Exe-Sql</a></td><td>SQLファイルに含まれた任意のSQLを実行するタスクです。</td></tr>
				</table>
			</subsection>
		</section>
		<section name="タスクの使用例">
			<p>
				タスクは組み合わせて使用します。
				以下の例では、タスクを組み合わせ3つのターゲットを定義しています。
			</p>
			<source><![CDATA[<project name="example-s2jdbc-gen" default="gen-ddl" basedir=".">

  <property name="classpathdir" value="src/main/webapp/WEB-INF/classes"/>
  <property name="rootpackagename" value="example"/>
  <property name="entitypackagename" value="entity"/>
  <property name="javafiledestdir" value="src/main/java"/>
  <property name="testjavafiledestdir" value="src/test/java"/>
  <property name="javafileencoding" value="UTF-8"/>
  <property name="env" value="ut"/>
  <property name="applyenvtoversion" value="false"/>
  <property name="jdbcmanagername" value="jdbcManager"/>
  <property name="version" value="latest"/>

  <path id="classpath">
    <pathelement location="${classpathdir}"/>
    <fileset dir="src/main/webapp/WEB-INF/lib"/>
    <fileset dir="lib"/>
  </path>

  <taskdef resource="s2jdbc-gen-task.properties" classpathref="classpath"/>

  <target name="gen-entity">
    <gen-entity
      rootpackagename="${rootpackagename}"
      entitypackagename="${entitypackagename}"
      javafiledestdir="${javafiledestdir}"
      javafileencoding="${javafileencoding}"
      env="${env}"
      jdbcmanagername="${jdbcmanagername}"
      classpathref="classpath"
    />
    <javac
      srcdir="${javafiledestdir}"
      destdir="${classpathdir}"
      encoding="${javafileencoding}"
      fork="true"
      debug="on"
      classpathref="classpath">
      <include name="${rootpackagename}/${entitypackagename}/**"/>
    </javac>
    <gen-test
      classpathdir="${classpathdir}"
      rootpackagename="${rootpackagename}"
      entitypackagename="${entitypackagename}"
      javafiledestdir="${testjavafiledestdir}"
      javafileencoding="${javafileencoding}"
      env="${env}"
      jdbcmanagername="${jdbcmanagername}"
      classpathref="classpath"
    />
    <gen-names
      classpathdir="${classpathdir}"
      rootpackagename="${rootpackagename}"
      entitypackagename="${entitypackagename}"
      javafiledestdir="${javafiledestdir}"
      javafileencoding="${javafileencoding}"
      env="${env}"
      jdbcmanagername="${jdbcmanagername}"
      classpathref="classpath"
    />
    <gen-service
      classpathdir="${classpathdir}"
      rootpackagename="${rootpackagename}"
      entitypackagename="${entitypackagename}"
      javafiledestdir="${javafiledestdir}"
      javafileencoding="${javafileencoding}"
      env="${env}"
      jdbcmanagername="${jdbcmanagername}"
      classpathref="classpath"
    />
  </target>

  <target name="gen-ddl">
    <gen-ddl
      classpathdir="${classpathdir}"
      rootpackagename="${rootpackagename}"
      entitypackagename="${entitypackagename}"
      env="${env}"
      jdbcmanagername="${jdbcmanagername}"
      classpathref="classpath"
    />
    <gen-test
      classpathdir="${classpathdir}"
      rootpackagename="${rootpackagename}"
      entitypackagename="${entitypackagename}"
      javafiledestdir="${testjavafiledestdir}"
      javafileencoding="${javafileencoding}"
      env="${env}"
      jdbcmanagername="${jdbcmanagername}"
      classpathref="classpath"
    />
    <gen-names
      classpathdir="${classpathdir}"
      rootpackagename="${rootpackagename}"
      entitypackagename="${entitypackagename}"
      javafiledestdir="${javafiledestdir}"
      javafileencoding="${javafileencoding}"
      env="${env}"
      jdbcmanagername="${jdbcmanagername}"
      classpathref="classpath"
    />
    <gen-service
      classpathdir="${classpathdir}"
      rootpackagename="${rootpackagename}"
      entitypackagename="${entitypackagename}"
      javafiledestdir="${javafiledestdir}"
      javafileencoding="${javafileencoding}"
      env="${env}"
      jdbcmanagername="${jdbcmanagername}"
      classpathref="classpath"
    />
  </target>

  <target name="migrate">
    <migrate
      classpathdir="${classpathdir}"
      rootpackagename="${rootpackagename}"
      entitypackagename="${entitypackagename}"
      version="${version}"
      env="${env}"
      applyenvtoversion="${applyenvtoversion}"
      jdbcmanagername="${jdbcmanagername}"
      classpathref="classpath"
    />
  </target>

</project>]]></source>
			<p>
				各ターゲットの役割は次のとおりです。
				<ul>
					<li>
						<p>
							gen-entityは、データベースからエンティティクラスを生成し、エンティティクラスに関連する便利クラスも生成します。
						</p>
					</li>
					<li>
						<p>
							gen-ddlはDDLを生成します。DDLの生成前にはエンティティクラスを修正しているはずなので、エンティティクラスに依存する便利クラスも同時に生成しなおします。
						</p>
					</li>
					<li>
						<p>
							migrateはデータベーススキーマのマイグレーションを行います。
						</p>
					</li>
				</ul>
			</p>
			<p>
				このビルドファイルは、実践で使われることを想定したターゲット定義を記述しています。
				カスタマイズして使用すると良いでしょう。
			</p>
		</section>
	</body>
</document>
